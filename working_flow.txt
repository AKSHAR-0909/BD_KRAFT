-The purpose of this document is to understand the flow of RAFT

-The purpose of raft is to provide a distributed consensus system

- First in the system there should be a leader , the initial term will be 0. If there 
is no leader then the process of leader election takes place.

~LEADER election

    CASE 1:- Initally no leader elected

    --  All the nodes will be FOLLOWERS , they will have a random timeout. 
        The reason for the random timeout if to avoid all the nodes becoming candidate nodes.

    -- The node which has the least timeout will be a candidate node. 

    -- The candidate node now asks for vote requests to other nodes.

    ~Voting process

        ---The vote format should have 
            {
                term: the candidates term,
                candidateID : candidates requesting vote,
                lastLongIndex: index of candidates last log entry,
                lastlogTerm : term of candidate's last log entry
            }
        
        --- The votes are sent parallely to the fellow controller nodes.(Create threads)

        --- The candidate votes for itself and increments its term and will not vote for any other candidate node.It
            also resets its timeout.

        --- The follower node will not vote for a candidate node if:

            CASE 1: Follower_term > candidate_ term (Reason : might be crash)
            CASE 2: If the candidate node's last log entry < Follower node's last log entry.

        --- Other cases the follower will vote.
        Vote response = {
            term : current term for candidate to update itself,
            voteGranted : true if voted else false
        }

        Note : If there are multiple candidate nodes , as soon as vote is granted the term is incremented and made equal 
               to the term. (This is to avoid multiple vote grants)

        --- In case the candidate node receives an appendEntry RPC (heartbeat) from the leader, it's state should be changed
            to follower. 

        Note: If the term in AppendEntriesRPC is smaller than the candidate , then reject the RPC and continue in candidate state.

        --- In the case of vote split

            ---- When this happens,each candidate will timeout and start a new election by incrementing
                its term and initiating another round of RequestVoteRPCs.
        
        --- The candidate wins the election if it receives majority vote and becomes the leader.

~ AppendEntries
    - Log is like a list of changes. To add stuff, find last index that things were added to, and add after this. (see image in page 7 of paper)
    - Leader sends AppendEntries to all followers, in parallel threads:
    {
        term : leader's term (if any follower or other leader has lower term, it should update itself),
        leaderID,
        prevLogIndex : position of the entry after which the new data will be added,
        prevLogTerm : the term in which the last entry was previously added or changed,
        entries : list of new entries (index starts from prevLogIndex+1), this is empty if heartbeat
    }

    - Followers receive this and reply with:
    {
        success : false / true (conditions below),
        term : currentTerm (because leader can use it if it is lagging behind in term)
    }
    Result if false if: 
        a. the term > leaderTerm
        b. there is no entry at prevLogIndex at prevLogTerm (even if term at prevLogIndex is lesser, this means something is wrong)

    If result is true, follower 

    If leader receives term > its term, go to follower state

    Whenever a new leader is elected, prevLogIndex = the last log index in leader and nextIndex = prevLogIndex + 1
    -- "If a follower’s log is inconsistent with the leader’s, the AppendEntries consistency check will fail in the next AppendEntries RPC. 
        After a rejection, the leader decrements nextIndex and retries the AppendEntries RPC. 
        Eventually nextIndex will reach a point where the leader and follower logs match."
    -- [To optimise, the follower can also send back the term of conflicting entry and the first index that stores that term.]
    -- From this, all next log entries are appended to follower.
    



# Safety
Make sure that the new leader for a new term always starts with all the entries that are committed in previous terms.

    ## Election restrictions
        - A candidate cannot win an election unless its logs contains all committed entries. 
        - A candidate can win an election iff its log is at least as up-to-date with any other log from the majority that it ask the vote from.
        - to determine up-to-dateness of 2 logs use index and term of the last entries in the logs. If the logs have last entries with different terms, then the log with the later term is more up-to-date. If the logs end with the same term, then whichever log is longer is more up-to-date.

    ## Committing previous term entries entries
        - the paper also talks about a situation where an old log entry is stored on a majority of servers, yet can still be overwritten by a future leader.
        The entries from the previous terms will not be replicated and hence committed and instead raft only commits log entries from the leader's current term . 

    ## Failover of candidates and crashes
        - AppendEntriesRPC will fail. Retry indefinitely till follower is fixed and responds to the RPC.

    ## Timing and Availability
        - Most important condition - 
        broadcastTime<< electionTimeout<< MTBF 

        - if broadcastTime > electionTimeout too many followers become candidates and start elections unnecessarily.





        

        



